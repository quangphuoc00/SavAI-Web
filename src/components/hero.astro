---
import { Picture } from "astro:assets";
import heroImage from "assets/hero.png";
import Link from "@components/ui/link.astro";
import { Icon } from "astro-icon/components";
---

<main
  class="grid lg:grid-cols-2 place-items-center pt-16 pb-8 md:pt-12 md:pb-24">
  <div class="py-6 md:order-1 hidden md:block">
    <Picture
      src={heroImage}
      alt="Astronaut in the air"
      widths={[200, 400, 600]}
      sizes="(max-width: 800px) 100vw, 620px"
      loading="eager"
      format="avif"
    />
  </div>
  <div>
    <h1
      class="text-5xl lg:text-6xl xl:text-7xl font-bold lg:tracking-tight xl:tracking-tighter">
      Never Overpay Again
    </h1>
    <p class="text-lg mt-4 text-slate-600 max-w-xl">
      SavAI ensures you always get the best price. When prices drop, you get money back
    </p>
    <div class="mt-6 flex flex-col gap-3">
      <div class="flex flex-col sm:flex-row gap-3">
        <input
          type="email"
          id="email-input"
          placeholder="Enter your email"
          class="px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors"
          data-valid="false"
        />
        <Link
          href="#"
          id="submit-button"
          class="flex gap-1 items-center justify-center disabled:opacity-50 relative"
          rel="noopener">
          <span id="button-text">Join the Waiting List</span>
          <span id="loading-spinner" class="hidden absolute inset-0 flex items-center justify-center">
            <svg class="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
          </span>
        </Link>
      </div>
      <p id="error-message" class="text-red-500 text-sm hidden">Please enter a valid email address</p>
    </div>
  </div>
</main>

<style>
  input[data-valid="false"]:not(:placeholder-shown) {
    border-color: #ef4444;
  }
  input[data-valid="true"] {
    border-color: #22c55e;
  }
</style>

<script>
  import { supabase } from '../lib/supabase';
  
  const emailInput = document.getElementById('email-input') as HTMLInputElement;
  const submitButton = document.getElementById('submit-button');
  const buttonText = document.getElementById('button-text');
  const loadingSpinner = document.getElementById('loading-spinner');
  const errorMessage = document.getElementById('error-message');

  const setLoading = (isLoading: boolean) => {
    if (isLoading) {
      buttonText?.classList.add('invisible');
      loadingSpinner?.classList.remove('hidden');
      submitButton?.classList.add('cursor-not-allowed');
      emailInput.disabled = true;
    } else {
      buttonText?.classList.remove('invisible');
      loadingSpinner?.classList.add('hidden');
      submitButton?.classList.remove('cursor-not-allowed');
      emailInput.disabled = false;
    }
  };

  const validateEmail = (email: string) => {
    return email.match(/^[^\s@]+@[^\s@]+\.[^\s@]+$/);
  };

  emailInput?.addEventListener('input', (e) => {
    const target = e.target as HTMLInputElement;
    const isValid = validateEmail(target.value);
    
    target.dataset.valid = isValid ? "true" : "false";
    
    if (submitButton) {
      submitButton.classList.toggle('opacity-50', !isValid);
      submitButton.style.pointerEvents = isValid ? 'auto' : 'none';
    }

    // Show error message if there's input but it's invalid
    if (target.value && !isValid) {
      errorMessage?.classList.remove('hidden');
    } else {
      errorMessage?.classList.add('hidden');
    }
  });

  submitButton?.addEventListener('click', async (e) => {
    e.preventDefault();
    const email = emailInput?.value;

    if (!email || !validateEmail(email)) {
      errorMessage!.textContent = 'Please enter a valid email address';
      errorMessage?.classList.remove('hidden');
      return;
    }

    setLoading(true);

    try {
      const { error } = await supabase
        .from('waitlist')
        .insert([
          { 
            email,
            signup_date: new Date().toISOString(),
            source: window.location.pathname
          }
        ]);

      if (error) {
        if (error.code === '23505') { // Unique constraint violation
          throw new Error('This email is already on the waiting list!');
        }
        throw error;
      }

      // Show success state
      emailInput.value = '';
      emailInput.dataset.valid = 'false';
      errorMessage!.textContent = 'Thanks for joining the waitlist!';
      errorMessage!.classList.remove('hidden', 'text-red-500');
      errorMessage!.classList.add('text-green-500');
      
    } catch (error) {
      console.error('Error:', error);
      errorMessage!.textContent = error instanceof Error ? error.message : 'Something went wrong. Please try again.';
      errorMessage?.classList.remove('hidden', 'text-green-500');
      errorMessage?.classList.add('text-red-500');
    } finally {
      setLoading(false);
    }
  });
</script>
