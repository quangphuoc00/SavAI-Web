---
// @ts-nocheck
import { Icon } from "astro-icon/components";
import { supabase } from '../lib/supabase';

// Add locations array at the top with other constants
const locations = [
  "Calgary, AB",
  "Edmonton, AB", 
  "Langley, BC",
  "Vancouver, BC",
  "Winnipeg, MB",
  "Burlington, ON",
  "London, ON",
  "Mississauga & Oakville, ON",
  "Ottawa, ON", 
  "Toronto, ON",
  "Saskatoon, SK"
];

const promoItems = [
  {
    name: "Benadryl Allergy",
    image: "https://west.cocowest1.ca/uploads/2025/01/BENADRYL_ALLERGY_25_MG_185_CAPLETS_20250127_195014.jpeg",
    category: "Health & Beauty",
    price_history: [
      {
        posted_date: "2024-02-10",
        savings: 5.00,
        expiry_date: "2024-04-28",
        final_price: 19.99
      },
      {
        posted_date: "2024-02-07",
        savings: 2.50,
        expiry_date: "2024-04-21",
        final_price: 22.49
      },
      {
        posted_date: "2023-10-28",
        savings: 3.00,
        expiry_date: "2023-11-30",
        final_price: 21.99
      }
    ]
  },
  {
    name: "Island Farms Milk",
    image: "https://west.cocowest1.ca/uploads/2024/04/ISLAND_FARMS_2_MILK_4L_20240423_163007.jpg",
    category: "Fresh Food",
    price_history: [
      {
        posted_date: "2024-02-10",
        savings: 1.00,
        expiry_date: "2024-04-21",
        final_price: 5.99
      },
      {
        posted_date: "2024-01-15",
        savings: 0.50,
        expiry_date: "2024-02-15",
        final_price: 6.49
      }
    ]
  },
  {
    name: "Glaxal Base Cream",
    image: "https://west.cocowest1.ca/uploads/2024/11/GLAXAL_BASE_CREAM_450g___50_g_20241115_185487.jpg",
    category: "Health & Beauty",
    price_history: [
      {
        posted_date: "2024-02-15",
        savings: 4.00,
        expiry_date: "2024-04-30",
        final_price: 15.99
      },
      {
        posted_date: "2024-01-20",
        savings: 2.00,
        expiry_date: "2024-02-10",
        final_price: 17.99
      },
      {
        posted_date: "2023-12-01",
        savings: 3.00,
        expiry_date: "2023-12-31",
        final_price: 16.99
      }
    ]
  },
  {
    name: "Glaxal Base Cream",
    image: "https://west.cocowest1.ca/uploads/2024/11/GLAXAL_BASE_CREAM_450g___50_g_20241115_185487.jpg",
    category: "Health & Beauty",
    price_history: [
      {
        posted_date: "2024-02-15",
        savings: 4.00,
        expiry_date: "2024-04-30",
        final_price: 15.99
      },
      {
        posted_date: "2024-01-20",
        savings: 2.00,
        expiry_date: "2024-02-10",
        final_price: 17.99
      },
      {
        posted_date: "2023-12-01",
        savings: 3.00,
        expiry_date: "2023-12-31",
        final_price: 16.99
      }
    ]
  },
  {
    name: "Glaxal Base Cream",
    image: "https://west.cocowest1.ca/uploads/2024/11/GLAXAL_BASE_CREAM_450g___50_g_20241115_185487.jpg",
    category: "Health & Beauty",
    price_history: [
      {
        posted_date: "2024-02-15",
        savings: 4.00,
        expiry_date: "2024-04-30",
        final_price: 15.99
      },
      {
        posted_date: "2024-01-20",
        savings: 2.00,
        expiry_date: "2024-02-10",
        final_price: 17.99
      },
      {
        posted_date: "2023-12-01",
        savings: 3.00,
        expiry_date: "2023-12-31",
        final_price: 16.99
      }
    ]
  },
  {
    name: "Glaxal Base Cream",
    image: "https://west.cocowest1.ca/uploads/2024/11/GLAXAL_BASE_CREAM_450g___50_g_20241115_185487.jpg",
    category: "Health & Beauty",
    price_history: [
      {
        posted_date: "2024-02-15",
        savings: 4.00,
        expiry_date: "2024-04-30",
        final_price: 15.99
      },
      {
        posted_date: "2024-01-20",
        savings: 2.00,
        expiry_date: "2024-02-10",
        final_price: 17.99
      },
      {
        posted_date: "2023-12-01",
        savings: 3.00,
        expiry_date: "2023-12-31",
        final_price: 16.99
      }
    ]
  }
];

// Get unique categories that have items
const availableCategories = [
  ...new Set(promoItems.map((item) => item.category)),
];

// Add pagination configuration
const itemsPerPage = 12;
const totalPages = Math.ceil(promoItems.length / itemsPerPage);
---

<div class="mt-4 mb-12">
  <h2 class="text-4xl lg:text-5xl font-bold lg:tracking-tight text-center">
    Today's Costco Warehouse Deals
  </h2>
  <p class="text-lg mt-4 text-slate-600 text-center max-w-xl mx-auto">
    Discover the latest Costco in-warehouse savings! 

  <!-- Search and Location Row -->
  <div class="max-w-xl mx-auto mt-8 flex gap-4">
    <!-- Location Selector -->
    <div class="relative w-1/3">
      <select
        id="warehouseSelect"
        class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent appearance-none"
      >
        {locations.map((location) => (
          <option value={location}>{location}</option>
        ))}
      </select>
      <div class="absolute right-3 top-2.5 text-gray-400 pointer-events-none">
        <Icon name="ic:baseline-location-on" class="w-6 h-6" />
      </div>
    </div>

    <!-- Search Box -->
    <div class="relative flex-1">
      <input
        type="text"
        id="searchInput"
        placeholder="Search products..."
        class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
      />
      <div class="absolute right-3 top-2.5 text-gray-400">
        <Icon name="ic:baseline-search" class="w-6 h-6" />
      </div>
    </div>
  </div>

  <!-- Quick Filters -->
  <div class="flex flex-wrap justify-center gap-2 mt-6 max-w-6xl mx-auto px-4">
    <button class="px-3 py-1.5 text-sm bg-[#C0A4F9] text-black rounded-[8px] hover:bg-[#b089ff]">
      All Categories
    </button>
    {availableCategories.map((category) => (
      <button class="px-3 py-1.5 text-sm bg-gray-100 text-gray-700 rounded-[8px] hover:bg-[#C0A4F9] hover:text-black">
        {category}
      </button>
    ))}
  </div>
</div>

<!-- Price History Dialog -->
<div id="priceHistoryDialog" class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center z-50">
  <div class="bg-white rounded-lg p-6 max-w-md w-full mx-4" onclick="event.stopPropagation()">
    <div class="flex justify-between items-center mb-4">
      <h3 class="text-xl font-semibold">Price History</h3>
      <button class="text-gray-500 hover:text-gray-700" id="closeHistoryBtn">
        <Icon name="ic:baseline-close" class="w-6 h-6" />
      </button>
    </div>
    <div class="overflow-x-auto">
      <table class="w-full">
        <thead>
          <tr class="border-b">
            <th class="text-left py-2">Updated</th>
            <th class="text-left py-2">EXP</th>
            <th class="text-left py-2">Savings</th>
            <th class="text-left py-2">Price</th>
          </tr>
        </thead>
        <tbody>
          <!-- Will be populated dynamically -->
        </tbody>
      </table>
    </div>
  </div>
</div>

<div
  id="productGrid"
  class="grid sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 mt-16 gap-8 mb-16">
  {
    promoItems.map((item) => {
      const currentPrice = item.price_history[0];
      const regularPrice = (currentPrice.final_price + currentPrice.savings).toFixed(2);
      
      return (
        <div
          class="product-card flex flex-col border rounded-lg shadow-sm hover:shadow-md transition-shadow"
          data-category={item.category}>
          <div class="p-4">
            <div class="relative">
              <img
                src={item.image}
                alt={item.name}
                class="w-full h-48 object-contain mb-4"
              />
              <div class="absolute top-0 right-0 bg-red-600 text-white px-3 py-1.5 rounded-bl-lg">
                <span class="text-lg font-bold">Save ${currentPrice.savings.toFixed(2)}</span>
              </div>
            </div>
            <h3 class="font-semibold text-lg">{item.name}</h3>
            <p class="text-sm text-gray-500 mt-1">{item.category}</p>
            <div class="mt-4 flex items-center gap-2">
              <p class="text-2xl font-bold text-red-600">${currentPrice.final_price}</p>
              <p class="text-lg text-gray-500 line-through">${regularPrice}</p>
            </div>
            <p class="text-sm bg-[#E9E0FE] text-black px-2 py-1 rounded-[6px] inline-block mt-2">
              Valid until {new Date(currentPrice.expiry_date).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}
            </p>
            <button 
              class="mt-4 w-full bg-black text-white py-2 px-4 rounded-[8px] hover:bg-gray-800 transition-colors"
              data-price-history={JSON.stringify(item.price_history)}>
              Check Price History
            </button>
          </div>
        </div>
      );
    })
  }
</div>

<!-- Add pagination controls -->
<div class="flex justify-center items-center gap-2 mt-12 mb-16">
  <button
    id="prevPage"
    class="px-4 py-2 text-sm bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 disabled:opacity-50 disabled:cursor-not-allowed"
    disabled
  >
    Previous
  </button>
  <div id="pageNumbers" class="flex gap-1">
    <!-- Page numbers will be inserted here by JavaScript -->
  </div>
  <button
    id="nextPage"
    class="px-4 py-2 text-sm bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 disabled:opacity-50 disabled:cursor-not-allowed"
  >
    Next
  </button>
</div>

<script>
  // Move these functions to the top of the script
  function showPriceHistory(priceHistory) {
    const dialog = document.getElementById('priceHistoryDialog');
    if (dialog) {
      const tbody = dialog.querySelector('tbody');
      if (tbody) {
        tbody.innerHTML = priceHistory.map((record, index) => `
          <tr class="${index % 2 === 0 ? 'border-b bg-gray-50' : 'border-b'}">
            <td class="py-2">${new Date(record.posted_date).toLocaleDateString('en-US', { year: 'numeric', month: '2-digit', day: '2-digit' })}</td>
            <td class="py-2">${new Date(record.expiry_date).toLocaleDateString('en-US', { year: 'numeric', month: '2-digit', day: '2-digit' })}</td>
            <td class="py-2">$${record.savings.toFixed(2)}</td>
            <td class="py-2">$${record.final_price}</td>
          </tr>
        `).join('');
      }
      dialog.classList.remove('hidden');
      document.body.style.overflow = 'hidden';
    }
  }

  function closePriceHistory() {
    const dialog = document.getElementById('priceHistoryDialog');
    if (dialog) {
      dialog.classList.add('hidden');
      document.body.style.overflow = 'auto';
    }
  }

  const searchInput = document.getElementById("searchInput") as HTMLInputElement;
  const productGrid = document.getElementById("productGrid") as HTMLElement;
  const productCards = document.querySelectorAll<HTMLElement>(".product-card");

  const itemsPerPage = 12;
  let currentPage = 1;
  const prevButton = document.getElementById('prevPage') as HTMLButtonElement;
  const nextButton = document.getElementById('nextPage') as HTMLButtonElement;
  const pageNumbers = document.getElementById('pageNumbers');

  // Add warehouse select element
  const warehouseSelect = document.getElementById('warehouseSelect') as HTMLSelectElement;
  
  let currentCategory = "All Categories";

  // Get user's location and set default warehouse
  async function setDefaultWarehouse() {
    try {
      const response = await fetch('https://ipapi.co/json/');
      const data = await response.json();
      
      // Find closest warehouse based on latitude/longitude
      // For now, just default to Vancouver, BC
      warehouseSelect.value = "Vancouver, BC";
      
      // Trigger initial filter
      updateDisplay();
    } catch (error) {
      console.error('Error getting location:', error);
    }
  }

  function updatePagination() {
    const filteredCards = Array.from(productCards).filter(
      (card) => window.getComputedStyle(card).display !== 'none'
    );
    const totalPages = Math.ceil(filteredCards.length / itemsPerPage);
    
    // Update buttons state
    prevButton.disabled = currentPage === 1;
    nextButton.disabled = currentPage === totalPages;

    // Update page numbers
    if (pageNumbers) {
      pageNumbers.innerHTML = '';
      for (let i = 1; i <= totalPages; i++) {
        const pageButton = document.createElement('button');
        pageButton.textContent = i.toString();
        pageButton.classList.add(
          'px-3',
          'py-1',
          'text-sm',
          'rounded-md',
          'hover:bg-gray-200'
        );
        if (i === currentPage) {
          pageButton.classList.add('bg-[#C0A4F9]', 'text-black');
        } else {
          pageButton.classList.add('bg-gray-100', 'text-gray-700');
        }
        pageButton.addEventListener('click', () => {
          currentPage = i;
          updateDisplay();
        });
        pageNumbers.appendChild(pageButton);
      }
    }

    // Show/hide products based on current page
    filteredCards.forEach((card, index) => {
      if (index >= (currentPage - 1) * itemsPerPage && 
          index < currentPage * itemsPerPage) {
        card.style.display = "flex";
      } else {
        card.style.display = "none";
      }
    });
  }

  function updateDisplay() {
    // First, show all cards that match current filters
    let hasVisibleCards = false;
    
    productCards.forEach(card => {
      // Check category match
      const matchesCategory = currentCategory === "All Categories" || 
                            card.getAttribute("data-category") === currentCategory;
      
      // Check search match
      const title = card.querySelector("h3")?.textContent?.toLowerCase() || "";
      const category = card.querySelector(".text-gray-500")?.textContent?.toLowerCase() || "";
      const matchesSearch = !searchInput.value || 
                          title.includes(searchInput.value.toLowerCase()) || 
                          category.includes(searchInput.value.toLowerCase());
      
      // Show/hide card based on filters
      if (matchesCategory && matchesSearch) {
        card.style.display = "flex";
        hasVisibleCards = true;
      } else {
        card.style.display = "none";
      }
    });

    // Get the empty state element or create it if it doesn't exist
    let emptyState = productGrid?.querySelector(".empty-state-message");
    if (!emptyState) {
      emptyState = document.createElement('div');
      emptyState.className = "empty-state-message col-span-full flex flex-col items-center justify-center py-16";
    }

    if (!hasVisibleCards) {
      // Update empty state content
      emptyState.innerHTML = `
        <div class="mb-4">
          <svg class="w-16 h-16 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
        </div>
        <h3 class="text-xl font-semibold text-gray-700 mb-2">
          No items found
        </h3>
        <p class="text-gray-500 text-center">
          ${searchInput.value 
            ? `No results found for "${searchInput.value}"`
            : "No items available for the selected filters"}
        </p>
        <button 
          class="mt-4 px-4 py-2 bg-black text-white rounded-lg hover:bg-gray-800 transition-colors"
          onclick="window.location.reload()">
          Reset Filters
        </button>
      `;

      // Add empty state if it's not already in the DOM
      if (!emptyState.parentNode) {
        productGrid?.appendChild(emptyState);
      }

      // Hide pagination
      const paginationContainer = document.querySelector('.flex.justify-center.items-center.gap-2');
      if (paginationContainer) {
        (paginationContainer as HTMLElement).style.display = 'none';
      }
    } else {
      // Remove empty state if it exists
      emptyState.remove();
      
      // Show pagination
      const paginationContainer = document.querySelector('.flex.justify-center.items-center.gap-2');
      if (paginationContainer) {
        (paginationContainer as HTMLElement).style.display = 'flex';
      }

      // Apply pagination
      updatePagination();
    }
  }

  // Event Listeners
  searchInput?.addEventListener("input", () => {
    currentPage = 1;
    updateDisplay();

  });

  // Get all product cards and category buttons
  const categoryButtons = document.querySelectorAll(
    ".flex.flex-wrap.justify-center button",
  );

  categoryButtons.forEach((button) => {
    button.addEventListener("click", () => {
      categoryButtons.forEach((btn) => {
        btn.classList.remove("bg-[#C0A4F9]", "text-black");
        btn.classList.add("bg-gray-100", "text-gray-700");
      });
      button.classList.remove("bg-gray-100", "text-gray-700");
      button.classList.add("bg-[#C0A4F9]", "text-black");

      currentCategory = button.textContent?.trim() || "All Categories";
      currentPage = 1;
      updateDisplay();

    });
  });

  // Add pagination button handlers
  prevButton?.addEventListener('click', () => {
    if (currentPage > 1) {
      currentPage--;
      updateDisplay();
    }
  });

  nextButton?.addEventListener('click', () => {
    const filteredCards = Array.from(productCards).filter(
      (card) => window.getComputedStyle(card).display !== 'none'
    );
    const totalPages = Math.ceil(filteredCards.length / itemsPerPage);
    
    if (currentPage < totalPages) {
      currentPage++;
      updateDisplay();
    }
  });

  // Add warehouse change handler - will need to fetch new data in future
  warehouseSelect?.addEventListener('change', () => {
    // In future: Fetch new promoItems based on selected warehouse
    currentPage = 1;
    updateDisplay();
  });

  // Close dialog when clicking outside
  document.getElementById('priceHistoryDialog')?.addEventListener('click', (e: Event) => {
    const target = e.target as HTMLElement;
    if (target.id === 'priceHistoryDialog') {
      closePriceHistory();
    }
  });

  // Close dialog with ESC key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      closePriceHistory();
    }
  });

  // Add this at the start of your script
  document.querySelectorAll('[data-price-history]').forEach(button => {
    button.addEventListener('click', () => {
      const priceHistory = JSON.parse(button.getAttribute('data-price-history') || '[]');
      showPriceHistory(priceHistory);
    });
  });

  // Add this with the other event listeners
  document.getElementById('closeHistoryBtn')?.addEventListener('click', closePriceHistory);

  // Initialize
  setDefaultWarehouse();
</script>

